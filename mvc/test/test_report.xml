<?xml version="1.0" encoding="utf-8"?>
<!-- Test report generated by:  TDOG C++ Unit Testing Framework 1.0.0 -->
<test-root name="TDOG C++ Unit Testing Framework" version="1.0.0" total-tests="18">
  <timestamp type-name="start-run" encoding="iso8601">2013-02-09 14:02:51</timestamp>
  <test-run scope="all">
    <test-suite name="main_suite">
      <test-case name="instantiation" filename="..\..\src\main.cpp" author="">
        <timestamp type-name="start-test" encoding="iso8601">2013-02-09 14:02:51</timestamp>
        <info line="186">main_suite::instantiation</info>
        <pass-condition line="187">STR_EQUAL( &quot;main_suite::instantiation&quot;,TDOG_TEST_NAME() )</pass-condition>
        <pass-condition line="190">ASSERT( TDOG_GRUN.suite_exists(&quot;main_suite&quot;) )</pass-condition>
        <pass-condition line="191">ASSERT( TDOG_GRUN.test_exists(&quot;main_suite::instantiation&quot;) )</pass-condition>
        <duration type-name="test-case" units="sec">0</duration>
        <test-result>passed</test-result>
      </test-case>
      <test-case name="fixture" filename="..\..\src\main.cpp" author="">
        <timestamp type-name="start-test" encoding="iso8601">2013-02-09 14:02:51</timestamp>
        <pass-condition line="204">EQUAL( 668,int_val )</pass-condition>
        <pass-condition line="205">STR_EQUAL( &quot;Hello World&quot;,str_val )</pass-condition>
        <duration type-name="test-case" units="sec">0</duration>
        <test-result>passed</test-result>
      </test-case>
      <test-case name="assert_positive" filename="..\..\src\main.cpp" author="">
        <timestamp type-name="start-test" encoding="iso8601">2013-02-09 14:02:51</timestamp>
        <pass-condition line="212">ASSERT( true )</pass-condition>
        <pass-condition line="214">TDOG_ASSERT_MSG</pass-condition>
        <pass-condition line="215">EQUAL( 5,5 )</pass-condition>
        <pass-condition line="216">EQUAL( 4.7,4.7 )</pass-condition>
        <pass-condition line="217">EQUAL( std::string(&quot;hello&quot;),std::string(&quot;hello&quot;) )</pass-condition>
        <pass-condition line="218">TDOG_ASSERT_EQUAL_MSG</pass-condition>
        <pass-condition line="220">STR_EQUAL( &quot;Hello World&quot;,&quot;Hello World&quot; )</pass-condition>
        <pass-condition line="222">TDOG_ASSERT_STR_EQUAL_MSG</pass-condition>
        <pass-condition line="224">STRIC_EQUAL( &quot;Hello World&quot;,&quot;hEllo world&quot; )</pass-condition>
        <pass-condition line="226">TDOG_ASSERT_STRIC_EQUAL_MSG</pass-condition>
        <pass-condition line="228">INT_EQUAL( 3,3 )</pass-condition>
        <pass-condition line="230">DOUBLE_EQUAL( 5.5,5.6 )</pass-condition>
        <pass-condition line="231">TDOG_ASSERT_DOUBLE_EQUAL_MSG</pass-condition>
        <pass-condition line="235">ARRAY_EQUAL( a,b )</pass-condition>
        <pass-condition line="236">TDOG_ASSERT_ARRARY_EQUAL_MSG</pass-condition>
        <pass-condition line="239">ASSERT( !TDOG_HAS_TEST_FAILED() )</pass-condition>
        <duration type-name="test-case" units="sec">0</duration>
        <test-result>passed</test-result>
      </test-case>
      <test-case name="assert_negative" filename="..\..\src\main.cpp" author="">
        <timestamp type-name="start-test" encoding="iso8601">2013-02-09 14:02:51</timestamp>
        <pass-condition line="265">EQUAL( 1,prun.run(tdog::RUN_TEST, &quot;internal_suite::assert_false&quot;) )</pass-condition>
        <pass-condition line="267">EQUAL( 1,prun.run(tdog::RUN_TEST, &quot;internal_suite::assert_not_equal&quot;) )</pass-condition>
        <pass-condition line="269">EQUAL( 1,prun.run(tdog::RUN_TEST, &quot;internal_suite::assert_str_not_equal&quot;) )</pass-condition>
        <pass-condition line="271">EQUAL( 1,prun.run(tdog::RUN_TEST, &quot;internal_suite::assert_stric_not_equal&quot;) )</pass-condition>
        <pass-condition line="273">EQUAL( 1,prun.run(tdog::RUN_TEST, &quot;internal_suite::assert_double_not_equal&quot;) )</pass-condition>
        <pass-condition line="275">EQUAL( 1,prun.run(tdog::RUN_TEST, &quot;internal_suite::assert_array_not_equal&quot;) )</pass-condition>
        <duration type-name="test-case" units="sec">0</duration>
        <test-result>passed</test-result>
      </test-case>
      <test-case name="local_limit_pass" filename="..\..\src\main.cpp" author="">
        <timestamp type-name="start-test" encoding="iso8601">2013-02-09 14:02:51</timestamp>
        <duration type-name="test-case" units="sec">1</duration>
        <test-result>passed</test-result>
      </test-case>
      <test-case name="local_limit_fail" filename="..\..\src\main.cpp" author="">
        <timestamp type-name="start-test" encoding="iso8601">2013-02-09 14:02:52</timestamp>
        <pass-condition line="298">EQUAL( 1,prun.run(tdog::RUN_TEST, &quot;internal_suite::local_limit_fail&quot;) )</pass-condition>
        <duration type-name="test-case" units="sec">2</duration>
        <test-result>passed</test-result>
      </test-case>
      <test-case name="global_limit_pass" filename="..\..\src\main.cpp" author="">
        <timestamp type-name="start-test" encoding="iso8601">2013-02-09 14:02:54</timestamp>
        <pass-condition line="313">EQUAL( 0,prun.run(tdog::RUN_TEST, &quot;internal_suite::global_limit_pass&quot;) )</pass-condition>
        <duration type-name="test-case" units="sec">1</duration>
        <test-result>passed</test-result>
      </test-case>
      <test-case name="global_limit_fail" filename="..\..\src\main.cpp" author="">
        <timestamp type-name="start-test" encoding="iso8601">2013-02-09 14:02:55</timestamp>
        <pass-condition line="327">EQUAL( 1,prun.run(tdog::RUN_TEST, &quot;internal_suite::global_limit_fail&quot;) )</pass-condition>
        <duration type-name="test-case" units="sec">2</duration>
        <test-result>passed</test-result>
      </test-case>
      <test-case name="global_limit_override" filename="..\..\src\main.cpp" author="">
        <timestamp type-name="start-test" encoding="iso8601">2013-02-09 14:02:57</timestamp>
        <pass-condition line="341">EQUAL( 0,prun.run(tdog::RUN_TEST, &quot;internal_suite::global_limit_override&quot;) )</pass-condition>
        <duration type-name="test-case" units="sec">2</duration>
        <test-result>passed</test-result>
      </test-case>
      <test-case name="result_states" filename="..\..\src\main.cpp" author="">
        <timestamp type-name="start-test" encoding="iso8601">2013-02-09 14:02:59</timestamp>
        <pass-condition line="356">EQUAL( 2,prun.run() )</pass-condition>
        <pass-condition line="360">EQUAL( tdog::TR_PASSED,prun.test_result(&quot;internal_suite::test_pass&quot;) )</pass-condition>
        <pass-condition line="362">EQUAL( tdog::TR_FAILED,prun.test_result(&quot;internal_suite::test_fail&quot;) )</pass-condition>
        <pass-condition line="364">EQUAL( tdog::TR_TEST_ERROR,prun.test_result(&quot;internal_suite::test_error&quot;) )</pass-condition>
        <pass-condition line="366">EQUAL( tdog::TR_NOT_EXIST,prun.test_result(&quot;internal_suite::_invalid_name_&quot;) )</pass-condition>
        <pass-condition line="369">EQUAL( 3,prun.registered_count() )</pass-condition>
        <pass-condition line="370">EQUAL( 3,prun.stat_result(tdog::ST_RAN) )</pass-condition>
        <pass-condition line="371">EQUAL( 0,prun.stat_result(tdog::ST_SKIPPED) )</pass-condition>
        <pass-condition line="372">EQUAL( 1,prun.stat_result(tdog::ST_PASSED) )</pass-condition>
        <pass-condition line="373">EQUAL( 1,prun.stat_result(tdog::ST_FAILED) )</pass-condition>
        <pass-condition line="374">EQUAL( 1,prun.stat_result(tdog::ST_ERRORS) )</pass-condition>
        <duration type-name="test-case" units="sec">0</duration>
        <test-result>passed</test-result>
      </test-case>
      <test-case name="disabled_tests" filename="..\..\src\main.cpp" author="">
        <timestamp type-name="start-test" encoding="iso8601">2013-02-09 14:02:59</timestamp>
        <pass-condition line="389">EQUAL( false,prun.test_enabled(&quot;internal_suite::test_fail&quot;) )</pass-condition>
        <pass-condition line="390">EQUAL( -1,prun.run() )</pass-condition>
        <pass-condition line="391">EQUAL( 0,prun.stat_result(tdog::ST_RAN) )</pass-condition>
        <pass-condition line="392">EQUAL( 3,prun.stat_result(tdog::ST_SKIPPED) )</pass-condition>
        <pass-condition line="394">EQUAL( tdog::TR_NOT_RUN,prun.test_result(&quot;internal_suite::test_fail&quot;) )</pass-condition>
        <pass-condition line="398">EQUAL( 2,prun.run() )</pass-condition>
        <pass-condition line="399">EQUAL( 3,prun.stat_result(tdog::ST_RAN) )</pass-condition>
        <pass-condition line="400">EQUAL( 0,prun.stat_result(tdog::ST_SKIPPED) )</pass-condition>
        <pass-condition line="402">EQUAL( tdog::TR_FAILED,prun.test_result(&quot;internal_suite::test_fail&quot;) )</pass-condition>
        <pass-condition line="406">EQUAL( 1,prun.run() )</pass-condition>
        <pass-condition line="407">EQUAL( 2,prun.stat_result(tdog::ST_RAN) )</pass-condition>
        <pass-condition line="408">EQUAL( 1,prun.stat_result(tdog::ST_SKIPPED) )</pass-condition>
        <pass-condition line="410">EQUAL( tdog::TR_NOT_RUN,prun.test_result(&quot;internal_suite::test_fail&quot;) )</pass-condition>
        <pass-condition line="417">EQUAL( false,prun.suite_enabled(&quot;internal_suite&quot;) )</pass-condition>
        <pass-condition line="418">EQUAL( -1,prun.run() )</pass-condition>
        <pass-condition line="419">EQUAL( 0,prun.stat_result(tdog::ST_RAN) )</pass-condition>
        <pass-condition line="420">EQUAL( 3,prun.stat_result(tdog::ST_SKIPPED) )</pass-condition>
        <pass-condition line="422">EQUAL( tdog::TR_NOT_RUN,prun.test_result(&quot;internal_suite::test_fail&quot;) )</pass-condition>
        <pass-condition line="426">EQUAL( true,prun.suite_enabled(&quot;internal_suite&quot;) )</pass-condition>
        <pass-condition line="427">EQUAL( 2,prun.run() )</pass-condition>
        <pass-condition line="428">EQUAL( 3,prun.stat_result(tdog::ST_RAN) )</pass-condition>
        <pass-condition line="429">EQUAL( 0,prun.stat_result(tdog::ST_SKIPPED) )</pass-condition>
        <pass-condition line="431">EQUAL( tdog::TR_FAILED,prun.test_result(&quot;internal_suite::test_fail&quot;) )</pass-condition>
        <pass-condition line="435">EQUAL( -1,prun.run() )</pass-condition>
        <pass-condition line="436">EQUAL( 0,prun.stat_result(tdog::ST_RAN) )</pass-condition>
        <pass-condition line="437">EQUAL( 3,prun.stat_result(tdog::ST_SKIPPED) )</pass-condition>
        <pass-condition line="439">EQUAL( tdog::TR_NOT_RUN,prun.test_result(&quot;internal_suite::test_fail&quot;) )</pass-condition>
        <duration type-name="test-case" units="sec">0</duration>
        <test-result>passed</test-result>
      </test-case>
      <test-case name="text_report_generation" filename="..\..\src\main.cpp" author="">
        <timestamp type-name="start-test" encoding="iso8601">2013-02-09 14:02:59</timestamp>
        <pass-condition line="456">EQUAL( 0,prun.run() )</pass-condition>
        <pass-condition line="457">EQUAL( tdog::RUN_ALL,prun.run_scope() )</pass-condition>
        <pass-condition line="463">ASSERT( (rs.size() &gt; 0) )</pass-condition>
        <pass-condition line="466">ASSERT( (rs.find(&quot;internal_suite::test_pass&quot;) != std::string::npos) )</pass-condition>
        <pass-condition line="467">ASSERT( (rs.find(UNIQUE_REF_STR) == std::string::npos) )</pass-condition>
        <pass-condition line="468">ASSERT( (rs.find(&quot;internal_suite::test_fail&quot;) == std::string::npos) )</pass-condition>
        <pass-condition line="473">ASSERT( (rs.size() &gt; 0) )</pass-condition>
        <pass-condition line="476">ASSERT( (rs.find(&quot;internal_suite::test_pass&quot;) != std::string::npos) )</pass-condition>
        <pass-condition line="477">ASSERT( (rs.find(UNIQUE_REF_STR) != std::string::npos) )</pass-condition>
        <pass-condition line="478">ASSERT( (rs.find(&quot;internal_suite::test_fail&quot;) != std::string::npos) )</pass-condition>
        <pass-condition line="480">ASSERT( (rs.find(&quot;test message&quot;) != std::string::npos) )</pass-condition>
        <pass-condition line="482">ASSERT( (rs.find(&quot;integer: 34283, HEX: 0x000085EB, OCT:0102753&quot;) != std::string::npos) )</pass-condition>
        <pass-condition line="483">ASSERT( (rs.find(&quot;string: hello\\tworld\\u2312&quot;) != std::string::npos) )</pass-condition>
        <duration type-name="test-case" units="sec">0</duration>
        <test-result>passed</test-result>
      </test-case>
      <test-case name="html_report_generation" filename="..\..\src\main.cpp" author="">
        <timestamp type-name="start-test" encoding="iso8601">2013-02-09 14:02:59</timestamp>
        <pass-condition line="498">EQUAL( 0,prun.run() )</pass-condition>
        <pass-condition line="499">EQUAL( tdog::RUN_ALL,prun.run_scope() )</pass-condition>
        <pass-condition line="505">ASSERT( (rs.size() &gt; 0) )</pass-condition>
        <pass-condition line="508">ASSERT( (rs.find(&quot;internal_suite::test_pass&quot;) != std::string::npos) )</pass-condition>
        <pass-condition line="509">ASSERT( (rs.find(UNIQUE_REF_STR) == std::string::npos) )</pass-condition>
        <pass-condition line="510">ASSERT( (rs.find(&quot;internal_suite::test_fail&quot;) == std::string::npos) )</pass-condition>
        <pass-condition line="515">ASSERT( (rs.size() &gt; 0) )</pass-condition>
        <pass-condition line="518">ASSERT( (rs.find(&quot;internal_suite::test_pass&quot;) != std::string::npos) )</pass-condition>
        <pass-condition line="519">ASSERT( (rs.find(UNIQUE_REF_STR) != std::string::npos) )</pass-condition>
        <pass-condition line="520">ASSERT( (rs.find(&quot;internal_suite::test_fail&quot;) != std::string::npos) )</pass-condition>
        <duration type-name="test-case" units="sec">0</duration>
        <test-result>passed</test-result>
      </test-case>
      <test-case name="xml_report_generation" filename="..\..\src\main.cpp" author="">
        <timestamp type-name="start-test" encoding="iso8601">2013-02-09 14:02:59</timestamp>
        <pass-condition line="535">EQUAL( 0,prun.run() )</pass-condition>
        <pass-condition line="536">EQUAL( tdog::RUN_ALL,prun.run_scope() )</pass-condition>
        <pass-condition line="542">ASSERT( (rs.size() &gt; 0) )</pass-condition>
        <pass-condition line="545">ASSERT( (rs.find(&quot;internal_suite&quot;) != std::string::npos) )</pass-condition>
        <pass-condition line="546">ASSERT( (rs.find(&quot;test_pass&quot;) != std::string::npos) )</pass-condition>
        <pass-condition line="547">ASSERT( (rs.find(UNIQUE_REF_STR) != std::string::npos) )</pass-condition>
        <pass-condition line="548">ASSERT( (rs.find(&quot;test_fail&quot;) != std::string::npos) )</pass-condition>
        <duration type-name="test-case" units="sec">0</duration>
        <test-result>passed</test-result>
      </test-case>
      <test-case name="assert_throw_ok" filename="..\..\src\main.cpp" author="">
        <timestamp type-name="start-test" encoding="iso8601">2013-02-09 14:02:59</timestamp>
        <pass-condition line="554">ASSERT( throw int(1) ) THROWS: int</pass-condition>
        <duration type-name="test-case" units="sec">0</duration>
        <test-result>passed</test-result>
      </test-case>
      <test-case name="assert_no_throw_ok" filename="..\..\src\main.cpp" author="">
        <timestamp type-name="start-test" encoding="iso8601">2013-02-09 14:02:59</timestamp>
        <pass-condition line="560">Assert: &quot;do{}while(false)&quot; DOES NOT THROW</pass-condition>
        <duration type-name="test-case" units="sec">0</duration>
        <test-result>passed</test-result>
      </test-case>
      <test-case name="assert_throw_fail" filename="..\..\src\main.cpp" author="">
        <timestamp type-name="start-test" encoding="iso8601">2013-02-09 14:02:59</timestamp>
        <pass-condition line="574">EQUAL( 1,prun.run(tdog::RUN_TEST, &quot;internal_suite::assert_throw_fail&quot;) )</pass-condition>
        <duration type-name="test-case" units="sec">0</duration>
        <test-result>passed</test-result>
      </test-case>
      <test-case name="assert_no_throw_fail" filename="..\..\src\main.cpp" author="">
        <timestamp type-name="start-test" encoding="iso8601">2013-02-09 14:02:59</timestamp>
        <pass-condition line="588">EQUAL( 1,prun.run(tdog::RUN_TEST, &quot;internal_suite::assert_no_throw_fail&quot;) )</pass-condition>
        <duration type-name="test-case" units="sec">0</duration>
        <test-result>passed</test-result>
      </test-case>
    </test-suite>
  </test-run>
  <statistics>
    <ran>18</ran>
    <skipped>0</skipped>
    <passed>18</passed>
    <failed>0</failed>
    <errors>0</errors>
    <pass-rate>100</pass-rate>
  </statistics>
  <timestamp type-name="end-run" encoding="iso8601">2013-02-09 14:02:59</timestamp>
  <duration type-name="total-time" units="sec">8</duration>
</test-root>
