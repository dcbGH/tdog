<?xml version="1.0" ?>
<!-- Test report generated by: TDOG C++ xUnit Testing Framework 3.0 -->
<testsuites name="TDOG C++ xUnit Testing Framework" version="3.0" tests="90" failures="0" errors="0" skip="0" disabled="0" time="13">

  <!-- The 'declerr' element contains test case declaration error messages. Test run will be aborted if errors are present.
  Example: <declerr errors="1"><error>Some message.</error></declerr> -->
  <declerr errors="0"></declerr>

  <testsuite name="DEFAULT" id="0" tests="3" errors="0" failures="0" skipped="0" disabled="0" time="0" timestamp="2016-03-15 09:04:33" hostname="STARONE">
    <testcase name="setup_global_01" classname="setup_global_01" assertions="1" status="PASS (OK)" time="0">
      <!-- The 'system-out' element contains assertion and informational messages rather than actual stdout. -->
      <system-out>ASSERT_NOT( g_test_called ) [58]</system-out>
    </testcase>
    <testcase name="setup_global_02" classname="setup_global_02" assertions="2" status="PASS (OK)" time="0">
      <system-out>ASSERT( g_setup_called ) [64]</system-out>
      <system-out>ASSERT_NOT( g_test_called ) [65]</system-out>
    </testcase>
    <testcase name="default_namespace_test" classname="default_namespace_test" assertions="0" status="PASS (OK)" time="0">
    </testcase>
  </testsuite>
  <testsuite name="assert_suite" id="1" tests="35" errors="0" failures="0" skipped="0" disabled="0" time="0" timestamp="2016-03-15 09:04:33" hostname="STARONE">
    <testcase name="assert_positive" classname="assert_suite::assert_positive" assertions="10" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(positive_suite::assert) ) ) [471]</system-out>
      <system-out>ASSERT_EQ( NPOS, txt.find(&quot;-cond&quot;) ) [493]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;ASSERT&quot;) ) [494]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_msg()&quot;) ) [495]</system-out>
      <system-out>ASSERT_EQ( NPOS, htm.find(&quot;-cond&quot;) ) [496]</system-out>
      <system-out>ASSERT_NEQ( NPOS, htm.find(&quot;ASSERT&quot;) ) [497]</system-out>
      <system-out>ASSERT_NEQ( NPOS, htm.find(&quot;assert_msg()&quot;) ) [498]</system-out>
      <system-out>ASSERT_EQ( NPOS, xml.find(&quot;-cond&quot;) ) [499]</system-out>
      <system-out>ASSERT_NEQ( NPOS, xml.find(&quot;ASSERT&quot;) ) [500]</system-out>
      <system-out>ASSERT_NEQ( NPOS, xml.find(&quot;assert_msg()&quot;) ) [501]</system-out>
    </testcase>
    <testcase name="assert_not_positive" classname="assert_suite::assert_not_positive" assertions="3" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(positive_suite::assert_not) ) ) [510]</system-out>
      <system-out>ASSERT_EQ( NPOS, txt.find(&quot;-act&quot;) ) [521]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_not_msg()&quot;) ) [522]</system-out>
    </testcase>
    <testcase name="assert_eq_positive" classname="assert_suite::assert_eq_positive" assertions="7" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(positive_suite::assert_eq) ) ) [531]</system-out>
      <system-out>ASSERT_EQ( NPOS, txt.find(&quot;-act&quot;) ) [542]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_eq_msg(int)&quot;) ) [543]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_eq_msg(unsigned)&quot;) ) [544]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_eq_msg(string)&quot;) ) [545]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_eq_msg(wstring)&quot;) ) [546]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_eq_msg(vector)&quot;) ) [547]</system-out>
    </testcase>
    <testcase name="assert_neq_positive" classname="assert_suite::assert_neq_positive" assertions="7" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(positive_suite::assert_neq) ) ) [556]</system-out>
      <system-out>ASSERT_EQ( NPOS, txt.find(&quot;-act&quot;) ) [567]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_neq_msg(int)&quot;) ) [568]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_neq_msg(unsigned)&quot;) ) [569]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_neq_msg(string)&quot;) ) [570]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_neq_msg(wstring)&quot;) ) [571]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_neq_msg(vector)&quot;) ) [572]</system-out>
    </testcase>
    <testcase name="assert_lt_positive" classname="assert_suite::assert_lt_positive" assertions="3" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(positive_suite::assert_lt) ) ) [581]</system-out>
      <system-out>ASSERT_EQ( NPOS, txt.find(&quot;-act&quot;) ) [592]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_lt_msg(37)&quot;) ) [593]</system-out>
    </testcase>
    <testcase name="assert_lte_positive" classname="assert_suite::assert_lte_positive" assertions="4" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(positive_suite::assert_lte) ) ) [602]</system-out>
      <system-out>ASSERT_EQ( NPOS, txt.find(&quot;-act&quot;) ) [613]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_lte_msg(37)&quot;) ) [614]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_lte_msg(36)&quot;) ) [615]</system-out>
    </testcase>
    <testcase name="assert_gt_positive" classname="assert_suite::assert_gt_positive" assertions="3" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(positive_suite::assert_gt) ) ) [624]</system-out>
      <system-out>ASSERT_EQ( NPOS, txt.find(&quot;-act&quot;) ) [635]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_gt_msg(35)&quot;) ) [636]</system-out>
    </testcase>
    <testcase name="assert_gte_positive" classname="assert_suite::assert_gte_positive" assertions="4" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(positive_suite::assert_gte) ) ) [645]</system-out>
      <system-out>ASSERT_EQ( NPOS, txt.find(&quot;-act&quot;) ) [656]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_gte_msg(35)&quot;) ) [657]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_gte_msg(36)&quot;) ) [658]</system-out>
    </testcase>
    <testcase name="assert_double_eq_positive" classname="assert_suite::assert_double_eq_positive" assertions="3" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(positive_suite::assert_double_eq) ) ) [667]</system-out>
      <system-out>ASSERT_EQ( NPOS, txt.find(&quot;-act&quot;) ) [678]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_double_eq_msg()&quot;) ) [679]</system-out>
    </testcase>
    <testcase name="assert_double_neq_positive" classname="assert_suite::assert_double_neq_positive" assertions="3" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(positive_suite::assert_double_neq) ) ) [688]</system-out>
      <system-out>ASSERT_EQ( NPOS, txt.find(&quot;-act&quot;) ) [699]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_double_neq_msg()&quot;) ) [700]</system-out>
    </testcase>
    <testcase name="assert_stric_eq_positive" classname="assert_suite::assert_stric_eq_positive" assertions="3" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(positive_suite::assert_stric_eq) ) ) [709]</system-out>
      <system-out>ASSERT_EQ( NPOS, txt.find(&quot;-act&quot;) ) [720]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_stric_eq_msg()&quot;) ) [721]</system-out>
    </testcase>
    <testcase name="assert_stric_neq_positive" classname="assert_suite::assert_stric_neq_positive" assertions="3" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(positive_suite::assert_stric_neq) ) ) [730]</system-out>
      <system-out>ASSERT_EQ( NPOS, txt.find(&quot;-act&quot;) ) [741]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_stric_neq_msg()&quot;) ) [742]</system-out>
    </testcase>
    <testcase name="assert_array_eq_positive" classname="assert_suite::assert_array_eq_positive" assertions="4" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(positive_suite::assert_array_eq) ) ) [751]</system-out>
      <system-out>ASSERT_EQ( NPOS, txt.find(&quot;-act&quot;) ) [762]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_array_eq_msg(array)&quot;) ) [763]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_array_eq_msg(vector)&quot;) ) [764]</system-out>
    </testcase>
    <testcase name="assert_array_neq_positive" classname="assert_suite::assert_array_neq_positive" assertions="4" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(positive_suite::assert_array_neq) ) ) [773]</system-out>
      <system-out>ASSERT_EQ( NPOS, txt.find(&quot;-act&quot;) ) [784]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_array_neq_msg(array)&quot;) ) [785]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_array_neq_msg(vector)&quot;) ) [786]</system-out>
    </testcase>
    <testcase name="assert_throw_positive" classname="assert_suite::assert_throw_positive" assertions="1" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(positive_suite::assert_throw) ) ) [795]</system-out>
    </testcase>
    <testcase name="assert_no_throw_positive" classname="assert_suite::assert_no_throw_positive" assertions="1" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(positive_suite::assert_no_throw) ) ) [808]</system-out>
    </testcase>
    <testcase name="assert_negative" classname="assert_suite::assert_negative" assertions="13" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(negative_suite::assert) ) ) [824]</system-out>
      <system-out>ASSERT_EQ( NPOS, txt.find(&quot;-cond&quot;) ) [846]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_msg()&quot;) ) [847]</system-out>
      <system-out>ASSERT_EQ( NPOS, htm.find(&quot;-cond&quot;) ) [848]</system-out>
      <system-out>ASSERT_NEQ( NPOS, htm.find(&quot;assert_msg()&quot;) ) [849]</system-out>
      <system-out>ASSERT_NEQ( NPOS, xml.find(&quot;-cond&quot;) ) [850]</system-out>
      <system-out>ASSERT_NEQ( NPOS, xml.find(&quot;assert_msg()&quot;) ) [851]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;-cond&quot;) ) [866]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_msg()&quot;) ) [867]</system-out>
      <system-out>ASSERT_NEQ( NPOS, htm.find(&quot;-cond&quot;) ) [868]</system-out>
      <system-out>ASSERT_NEQ( NPOS, htm.find(&quot;assert_msg()&quot;) ) [869]</system-out>
      <system-out>ASSERT_NEQ( NPOS, xml.find(&quot;-cond&quot;) ) [870]</system-out>
      <system-out>ASSERT_NEQ( NPOS, xml.find(&quot;assert_msg()&quot;) ) [871]</system-out>
    </testcase>
    <testcase name="assert_not_negative" classname="assert_suite::assert_not_negative" assertions="3" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(negative_suite::assert_not) ) ) [881]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;-cond&quot;) ) [892]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_not_msg()&quot;) ) [893]</system-out>
    </testcase>
    <testcase name="assert_eq_negative" classname="assert_suite::assert_eq_negative" assertions="7" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(negative_suite::assert_eq) ) ) [902]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;-act&quot;) ) [913]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_eq_msg(int)&quot;) ) [914]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_eq_msg(unsigned)&quot;) ) [915]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_eq_msg(string)&quot;) ) [916]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_eq_msg(wstring)&quot;) ) [917]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_eq_msg(vector)&quot;) ) [918]</system-out>
    </testcase>
    <testcase name="assert_neq_negative" classname="assert_suite::assert_neq_negative" assertions="6" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(negative_suite::assert_neq) ) ) [927]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_neq_msg(int)&quot;) ) [938]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_neq_msg(unsigned)&quot;) ) [939]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_neq_msg(string)&quot;) ) [940]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_neq_msg(wstring)&quot;) ) [941]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_neq_msg(vector)&quot;) ) [942]</system-out>
    </testcase>
    <testcase name="assert_lt_negative" classname="assert_suite::assert_lt_negative" assertions="2" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(negative_suite::assert_lt) ) ) [951]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_lt_msg(36)&quot;) ) [962]</system-out>
    </testcase>
    <testcase name="assert_lte_negative" classname="assert_suite::assert_lte_negative" assertions="2" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(negative_suite::assert_lte) ) ) [971]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_lte_msg(35)&quot;) ) [982]</system-out>
    </testcase>
    <testcase name="assert_gt_negative" classname="assert_suite::assert_gt_negative" assertions="2" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(negative_suite::assert_gt) ) ) [991]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_gt_msg(36)&quot;) ) [1002]</system-out>
    </testcase>
    <testcase name="assert_gte_negative" classname="assert_suite::assert_gte_negative" assertions="2" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(negative_suite::assert_gte) ) ) [1011]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_gte_msg(37)&quot;) ) [1022]</system-out>
    </testcase>
    <testcase name="assert_double_eq_negative" classname="assert_suite::assert_double_eq_negative" assertions="2" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(negative_suite::assert_double_eq) ) ) [1031]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_double_eq_msg()&quot;) ) [1042]</system-out>
    </testcase>
    <testcase name="assert_double_neq_negative" classname="assert_suite::assert_double_neq_negative" assertions="2" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(negative_suite::assert_double_neq) ) ) [1051]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_double_neq_msg()&quot;) ) [1062]</system-out>
    </testcase>
    <testcase name="assert_stric_eq_negative" classname="assert_suite::assert_stric_eq_negative" assertions="2" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(negative_suite::assert_stric_eq) ) ) [1071]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_stric_eq_msg()&quot;) ) [1082]</system-out>
    </testcase>
    <testcase name="assert_stric_neq_negative" classname="assert_suite::assert_stric_neq_negative" assertions="2" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(negative_suite::assert_stric_neq) ) ) [1091]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_stric_neq_msg()&quot;) ) [1102]</system-out>
    </testcase>
    <testcase name="assert_array_eq_negative" classname="assert_suite::assert_array_eq_negative" assertions="3" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(negative_suite::assert_array_eq) ) ) [1111]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_array_eq_msg(array)&quot;) ) [1122]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_array_eq_msg(vector)&quot;) ) [1123]</system-out>
    </testcase>
    <testcase name="assert_array_neq_negative" classname="assert_suite::assert_array_neq_negative" assertions="3" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(negative_suite::assert_array_neq) ) ) [1132]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_array_neq_msg(array)&quot;) ) [1143]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;assert_array_neq_msg(vector)&quot;) ) [1144]</system-out>
    </testcase>
    <testcase name="assert_throw_negative" classname="assert_suite::assert_throw_negative" assertions="1" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(negative_suite::assert_throw) ) ) [1153]</system-out>
    </testcase>
    <testcase name="assert_no_throw_negative" classname="assert_suite::assert_no_throw_negative" assertions="1" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(negative_suite::assert_no_throw) ) ) [1166]</system-out>
    </testcase>
    <testcase name="force_fail" classname="assert_suite::force_fail" assertions="2" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(negative_suite::force_fail) ) ) [1179]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;Test failure was forced&quot;) ) [1190]</system-out>
    </testcase>
    <testcase name="force_error" classname="assert_suite::force_error" assertions="2" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(negative_suite::force_error) ) ) [1199]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;Test error was forced&quot;) ) [1210]</system-out>
    </testcase>
    <testcase name="has_test_failed" classname="assert_suite::has_test_failed" assertions="2" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(negative_suite::has_test_failed) ) ) [1219]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;This is failure warning&quot;) ) [1230]</system-out>
    </testcase>
  </testsuite>
  <testsuite name="discontig_suite" id="2" tests="1" errors="0" failures="0" skipped="0" disabled="0" time="0" timestamp="2016-03-15 09:04:34" hostname="STARONE">
    <testcase name="perform_test" classname="discontig_suite::perform_test" assertions="12" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::test1a) ) ) [47]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::test1b) ) ) [48]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::test2a) ) ) [49]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::test2b) ) ) [50]</system-out>
      <system-out>ASSERT_EQ( 0, tr.run() ) [53]</system-out>
      <system-out>ASSERT_EQ( 0, tr.statistic_count(tdog::CNT_FAILED, &quot;*&quot;) ) [56]</system-out>
      <system-out>ASSERT_EQ( 4, tr.statistic_count(tdog::CNT_PASSED, &quot;*&quot;) ) [57]</system-out>
      <system-out>ASSERT_EQ( 4, tr.statistic_count(tdog::CNT_PASSED, &quot;discontig_suite::internal_suite::&quot;) ) [59]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_PASS_OK, tr.test_status(&quot;discontig_suite::internal_suite::test1a&quot;) ) [60]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_PASS_OK, tr.test_status(&quot;discontig_suite::internal_suite::test1b&quot;) ) [61]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_PASS_OK, tr.test_status(&quot;discontig_suite::internal_suite::test2a&quot;) ) [62]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_PASS_OK, tr.test_status(&quot;discontig_suite::internal_suite::test2b&quot;) ) [63]</system-out>
    </testcase>
  </testsuite>
  <testsuite name="error_suite" id="3" tests="1" errors="0" failures="0" skipped="0" disabled="0" time="0" timestamp="2016-03-15 09:04:34" hostname="STARONE">
    <testcase name="error_test" classname="error_suite::error_test" assertions="4" status="PASS (OK)" time="0">
      <system-out>ASSERT_EQ( 2, tr.run() ) [67]</system-out>
      <system-out>ASSERT_EQ( 2, error_cnt ) [71]</system-out>
      <system-out>ASSERT_NEQ( NPOS, s.find(&quot;runtime_error&quot;) ) [78]</system-out>
      <system-out>ASSERT_NEQ( NPOS, s.find(&quot;The what message&quot;) ) [79]</system-out>
    </testcase>
  </testsuite>
  <testsuite name="example_suite" id="4" tests="4" errors="0" failures="0" skipped="0" disabled="0" time="0" timestamp="2016-03-15 09:04:34" hostname="STARONE">
    <testcase name="is_prime_func" classname="example_suite::is_prime_func" assertions="0" status="PASS (OK)" time="0">
    </testcase>
    <testcase name="enum_print" classname="example_suite::enum_print" assertions="0" status="PASS (OK)" time="0">
      <system-out>Enum value: 1 [76]</system-out>
    </testcase>
    <testcase name="inject_test1" classname="example_suite::inject_test1" assertions="0" status="PASS (OK)" time="0">
      <system-out>Type value: 77 [91]</system-out>
    </testcase>
    <testcase name="inject_test2" classname="example_suite::inject_test2" assertions="0" status="PASS (OK)" time="0">
      <system-out>Type value: 2001 [91]</system-out>
    </testcase>
  </testsuite>
  <testsuite name="example_suite::beast_suite" id="5" tests="1" errors="0" failures="0" skipped="0" disabled="0" time="0" timestamp="2016-03-15 09:04:34" hostname="STARONE">
    <testcase name="neighbor_test" classname="example_suite::beast_suite::neighbor_test" assertions="1" status="PASS (OK)" time="0">
      <system-out>ASSERT_EQ( 668, neighbor_of_beast ) [115]</system-out>
    </testcase>
  </testsuite>
  <testsuite name="fixture_suite" id="6" tests="6" errors="0" failures="0" skipped="0" disabled="0" time="0" timestamp="2016-03-15 09:04:34" hostname="STARONE">
    <testcase name="setup_positive" classname="fixture_suite::setup_positive" assertions="8" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::fixture_ok) ) ) [134]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::_teardown2) ) ) [135]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::_teardown1) ) ) [136]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::SETUP2) ) ) [137]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::SETUP1) ) ) [138]</system-out>
      <system-out>ASSERT_EQ( 0, tr.run(&quot;*&quot;) ) [144]</system-out>
      <system-out>ASSERT_EQ( &quot;setup1 setup2 fix_c fix_setup fix_teardown fix_d teardown1 teardown2 &quot;, internal_suite::log ) [148]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;OK: Fixture teardown()&quot;) ) [155]</system-out>
    </testcase>
    <testcase name="skip_on_fail" classname="fixture_suite::skip_on_fail" assertions="10" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::fixture_ok) ) ) [168]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::_teardown2) ) ) [169]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::_teardown1) ) ) [170]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::SETUP_FAIL) ) ) [171]</system-out>
      <system-out>ASSERT_EQ( 1, tr.run(&quot;*&quot;) ) [177]</system-out>
      <system-out>ASSERT_EQ( &quot;setup1 &quot;, internal_suite::log ) [180]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_FAILED, tr.test_status(&quot;fixture_suite::internal_suite::SETUP_FAIL&quot;) ) [183]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_SKIPPED, tr.test_status(&quot;fixture_suite::internal_suite::fixture_ok&quot;) ) [184]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_SKIPPED, tr.test_status(&quot;fixture_suite::internal_suite::_teardown1&quot;) ) [185]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_SKIPPED, tr.test_status(&quot;fixture_suite::internal_suite::_teardown2&quot;) ) [186]</system-out>
    </testcase>
    <testcase name="skip_on_error" classname="fixture_suite::skip_on_error" assertions="10" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::fixture_ok) ) ) [199]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::_teardown2) ) ) [200]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::_teardown1) ) ) [201]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::SETUP_ERROR) ) ) [202]</system-out>
      <system-out>ASSERT_EQ( 1, tr.run(&quot;*&quot;) ) [208]</system-out>
      <system-out>ASSERT_EQ( &quot;setup1 &quot;, internal_suite::log ) [211]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_ERROR, tr.test_status(&quot;fixture_suite::internal_suite::SETUP_ERROR&quot;) ) [214]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_SKIPPED, tr.test_status(&quot;fixture_suite::internal_suite::fixture_ok&quot;) ) [215]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_SKIPPED, tr.test_status(&quot;fixture_suite::internal_suite::_teardown1&quot;) ) [216]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_SKIPPED, tr.test_status(&quot;fixture_suite::internal_suite::_teardown2&quot;) ) [217]</system-out>
    </testcase>
    <testcase name="class_setup_fail" classname="fixture_suite::class_setup_fail" assertions="4" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::fixture_fail) ) ) [230]</system-out>
      <system-out>ASSERT_EQ( 1, tr.run(&quot;*&quot;) ) [236]</system-out>
      <system-out>ASSERT_EQ( &quot;fix_c fix_setup fix_d &quot;, internal_suite::log ) [239]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_ERROR, tr.test_status(&quot;fixture_suite::internal_suite::fixture_fail&quot;) ) [242]</system-out>
    </testcase>
    <testcase name="class_test_throw" classname="fixture_suite::class_test_throw" assertions="4" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::fixture_test_throw) ) ) [255]</system-out>
      <system-out>ASSERT_EQ( 1, tr.run(&quot;*&quot;) ) [261]</system-out>
      <system-out>ASSERT_EQ( &quot;fix_c fix_setup fix_teardown fix_d &quot;, internal_suite::log ) [264]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_ERROR, tr.test_status(&quot;fixture_suite::internal_suite::fixture_test_throw&quot;) ) [267]</system-out>
    </testcase>
    <testcase name="class_teardown_throw" classname="fixture_suite::class_teardown_throw" assertions="5" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::fixture_teardown_throw) ) ) [280]</system-out>
      <system-out>ASSERT_EQ( 1, tr.run(&quot;*&quot;) ) [286]</system-out>
      <system-out>ASSERT_EQ( &quot;fix_c fix_setup fix_d &quot;, internal_suite::log ) [289]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_ERROR, tr.test_status(&quot;fixture_suite::internal_suite::fixture_teardown_throw&quot;) ) [292]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;FAIL: Fixture teardown()&quot;) ) [299]</system-out>
    </testcase>
  </testsuite>
  <testsuite name="message_suite" id="7" tests="13" errors="0" failures="0" skipped="0" disabled="0" time="0" timestamp="2016-03-15 09:04:34" hostname="STARONE">
    <testcase name="print" classname="message_suite::print" assertions="4" status="PASS (OK)" time="0">
      <system-out>ASSERT_EQ( 0, tr.run() ) [138]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINT&lt;none&gt;&quot;) ) [156]</system-out>
      <system-out>ASSERT_NEQ( NPOS, htm.find(&quot;PRINT&amp;lt;none&amp;gt;&quot;) ) [157]</system-out>
      <system-out>ASSERT_NEQ( NPOS, xml.find(&quot;PRINT&amp;lt;none&amp;gt;&quot;) ) [158]</system-out>
    </testcase>
    <testcase name="printf_bool" classname="message_suite::printf_bool" assertions="3" status="PASS (OK)" time="0">
      <system-out>ASSERT_EQ( 0, tr.run() ) [168]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINT&lt;bool&gt; true&quot;) ) [174]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINT&lt;bool&gt; false&quot;) ) [175]</system-out>
    </testcase>
    <testcase name="printf_int" classname="message_suite::printf_int" assertions="2" status="PASS (OK)" time="0">
      <system-out>ASSERT_EQ( 0, tr.run() ) [185]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINTF&lt;int&gt; 34283, HEX: 0x000085EB, OCT:0102753&quot;) ) [191]</system-out>
    </testcase>
    <testcase name="printf_str" classname="message_suite::printf_str" assertions="3" status="PASS (OK)" time="0">
      <system-out>ASSERT_EQ( 0, tr.run() ) [201]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINTF&lt;str&gt; hello world&quot;) ) [207]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINTF&lt;str&gt; std::string&quot;) ) [208]</system-out>
    </testcase>
    <testcase name="printf_wstr" classname="message_suite::printf_wstr" assertions="3" status="PASS (OK)" time="0">
      <system-out>ASSERT_EQ( 0, tr.run() ) [218]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINTF&lt;wstr&gt; hello world&quot;) ) [224]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINTF&lt;wstr&gt; std::wstring&quot;) ) [225]</system-out>
    </testcase>
    <testcase name="printf_kstr" classname="message_suite::printf_kstr" assertions="2" status="PASS (OK)" time="0">
      <system-out>ASSERT_EQ( 0, tr.run() ) [235]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINTF&lt;kstr&gt; hello\\tworld&quot;) ) [241]</system-out>
    </testcase>
    <testcase name="printf_char" classname="message_suite::printf_char" assertions="7" status="PASS (OK)" time="0">
      <system-out>ASSERT_EQ( 0, tr.run() ) [251]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINTF&lt;str&gt; char*&quot;) ) [257]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINTF&lt;str&gt; const char*&quot;) ) [258]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINTF&lt;str&gt; wchar_t*&quot;) ) [259]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINTF&lt;str&gt; const wchar_t*&quot;) ) [260]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINTF&lt;str&gt; &lt;nullptr&gt;&quot;) ) [261]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINTF&lt;wstr&gt; &lt;nullptr&gt;&quot;) ) [262]</system-out>
    </testcase>
    <testcase name="printf_double" classname="message_suite::printf_double" assertions="2" status="PASS (OK)" time="0">
      <system-out>ASSERT_EQ( 0, tr.run() ) [272]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINTF&lt;double&gt; 3.142&quot;) ) [278]</system-out>
    </testcase>
    <testcase name="printf_pointer" classname="message_suite::printf_pointer" assertions="3" status="PASS (OK)" time="0">
      <system-out>ASSERT_EQ( 0, tr.run() ) [288]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINTF&lt;class&gt; addr:&quot;) ) [294]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINTF&lt;class&gt; &lt;nullptr&gt;&quot;) ) [295]</system-out>
    </testcase>
    <testcase name="printf_typed" classname="message_suite::printf_typed" assertions="3" status="PASS (OK)" time="0">
      <system-out>ASSERT_EQ( 0, tr.run() ) [305]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINTF&lt;enum&gt; 1&quot;) ) [311]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINTF&lt;size&gt; 2001&quot;) ) [312]</system-out>
    </testcase>
    <testcase name="printf_unknown" classname="message_suite::printf_unknown" assertions="2" status="PASS (OK)" time="0">
      <system-out>ASSERT_EQ( 0, tr.run() ) [322]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;PRINTF&lt;class&gt; &lt;unknown type&gt;&quot;) ) [328]</system-out>
    </testcase>
    <testcase name="warnings" classname="message_suite::warnings" assertions="5" status="PASS (OK)" time="0">
      <system-out>ASSERT_EQ( 0, tr.run() ) [338]</system-out>
      <system-out>ASSERT_EQ( 1, tr.statistic_count(tdog::CNT_WARNINGS) ) [340]</system-out>
      <system-out>ASSERT_NEQ( NPOS, txt.find(&quot;This is a warning&quot;) ) [355]</system-out>
      <system-out>ASSERT_NEQ( NPOS, htm.find(&quot;This is a warning&quot;) ) [356]</system-out>
      <system-out>ASSERT_NEQ( NPOS, xml.find(&quot;This is a warning&quot;) ) [357]</system-out>
    </testcase>
    <testcase name="print_warn" classname="message_suite::print_warn" assertions="0" status="PASS (WARN)" time="0">
      <system-out>WARNING: This is an example warning - the test should pass [363]</system-out>
    </testcase>
  </testsuite>
  <testsuite name="naming_suite" id="8" tests="4" errors="0" failures="0" skipped="0" disabled="0" time="0" timestamp="2016-03-15 09:04:34" hostname="STARONE">
    <testcase name="name_matching_impl" classname="naming_suite::name_matching_impl" assertions="11" status="PASS (OK)" time="0">
      <system-out>ASSERT_EQ( 0, suite_open.counter() ) [105]</system-out>
      <system-out>ASSERT_EQ( 0, suite_close.counter() ) [106]</system-out>
      <system-out>ASSERT( test_def.name_equals(&quot;test_name&quot;, false) ) [109]</system-out>
      <system-out>ASSERT( test_def.name_equals(&quot;::test_name&quot;, false) ) [110]</system-out>
      <system-out>ASSERT( test_def.name_equals(&quot;::&quot;, false) ) [111]</system-out>
      <system-out>ASSERT( test_def.name_equals(&quot;*&quot;, false) ) [112]</system-out>
      <system-out>ASSERT( test_def.name_equals(&quot;::*&quot;, false) ) [113]</system-out>
      <system-out>ASSERT_NOT( test_def.name_equals(&quot;wrong_name&quot;, false) ) [116]</system-out>
      <system-out>ASSERT_NOT( test_def.name_equals(&quot;test*&quot;, false) ) [117]</system-out>
      <system-out>ASSERT_NOT( test_def.name_equals(&quot;test::*&quot;, false) ) [118]</system-out>
      <system-out>ASSERT_NOT( test_def.name_equals(&quot;&quot;, false) ) [119]</system-out>
    </testcase>
    <testcase name="suite_matching_impl" classname="naming_suite::suite_matching_impl" assertions="14" status="PASS (OK)" time="0">
      <system-out>ASSERT( test_named.name_equals(&quot;suite1::suite2::test_name&quot;, false) ) [133]</system-out>
      <system-out>ASSERT( test_named.name_equals(&quot;::suite1::suite2::test_name&quot;, false) ) [134]</system-out>
      <system-out>ASSERT( test_named.name_equals(&quot;suite1::suite2::&quot;, false) ) [135]</system-out>
      <system-out>ASSERT( test_named.name_equals(&quot;::suite1::suite2::&quot;, false) ) [136]</system-out>
      <system-out>ASSERT( test_named.name_equals(&quot;suite1::*&quot;, false) ) [137]</system-out>
      <system-out>ASSERT( test_named.name_equals(&quot;*&quot;, false) ) [138]</system-out>
      <system-out>ASSERT( test_named.name_equals(&quot;::*&quot;, false) ) [139]</system-out>
      <system-out>ASSERT_NOT( test_named.name_equals(&quot;suite1::suite2::wrong_name&quot;, false) ) [142]</system-out>
      <system-out>ASSERT_NOT( test_named.name_equals(&quot;suite1::wrong_suite::test_name&quot;, false) ) [143]</system-out>
      <system-out>ASSERT_NOT( test_named.name_equals(&quot;suite1::&quot;, false) ) [144]</system-out>
      <system-out>ASSERT_NOT( test_named.name_equals(&quot;suite1::suite::*&quot;, false) ) [145]</system-out>
      <system-out>ASSERT_NOT( test_named.name_equals(&quot;&quot;, false) ) [146]</system-out>
      <system-out>ASSERT_NOT( test_named.name_equals(&quot;*&quot;, true) ) [147]</system-out>
      <system-out>ASSERT_NOT( test_named.name_equals(&quot;::*&quot;, true) ) [148]</system-out>
    </testcase>
    <testcase name="postive_tests" classname="naming_suite::postive_tests" assertions="9" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.exists(&quot;naming_suite::internal_suite::same_name&quot;) ) [166]</system-out>
      <system-out>ASSERT( tr.exists(&quot;naming_suite::internal_suite::same_name::subtest&quot;) ) [167]</system-out>
      <system-out>ASSERT( tr.exists(&quot;naming_suite::*&quot;) ) [168]</system-out>
      <system-out>ASSERT( tr.exists(&quot;::*&quot;) ) [171]</system-out>
      <system-out>ASSERT( tr.exists(&quot;::naming_suite::internal_suite::same_name&quot;) ) [172]</system-out>
      <system-out>ASSERT( tr.exists(&quot;::naming_suite::internal_suite::same_name::subtest&quot;) ) [173]</system-out>
      <system-out>ASSERT( tr.exists(&quot;naming_suite::internal_suite::&quot;) ) [176]</system-out>
      <system-out>ASSERT( tr.exists(&quot;naming_suite::internal_suite::same_name::&quot;) ) [177]</system-out>
      <system-out>ASSERT_EQ( 0, tr.run() ) [180]</system-out>
    </testcase>
    <testcase name="negative_tests" classname="naming_suite::negative_tests" assertions="5" status="PASS (OK)" time="0">
      <system-out>ASSERT_NOT( tr.exists(&quot;::&quot;) ) [198]</system-out>
      <system-out>ASSERT_NOT( tr.exists(&quot;naming_suite::&quot;) ) [199]</system-out>
      <system-out>ASSERT_NOT( tr.exists(&quot;naming_suite::internal_suite&quot;) ) [200]</system-out>
      <system-out>ASSERT_NOT( tr.exists(&quot;naming_suite::internal_suite::same_&quot;) ) [201]</system-out>
      <system-out>ASSERT_EQ( 0, tr.run() ) [204]</system-out>
    </testcase>
  </testsuite>
  <testsuite name="repeated_suite" id="9" tests="3" errors="0" failures="0" skipped="0" disabled="0" time="0" timestamp="2016-03-15 09:04:34" hostname="STARONE">
    <testcase name="repeated_baseobj" classname="repeated_suite::repeated_baseobj" assertions="5" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::inc_test) ) ) [165]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::dec_test) ) ) [166]</system-out>
      <system-out>ASSERT_EQ( 0, tr.run(&quot;*&quot;) ) [169]</system-out>
      <system-out>ASSERT_NEQ( NPOS, s.find(&quot;REPEATED&quot;) ) [178]</system-out>
      <system-out>ASSERT_NEQ( NPOS, s.find(&quot;baseobj_test&quot;) ) [179]</system-out>
    </testcase>
    <testcase name="repeated_template" classname="repeated_suite::repeated_template" assertions="5" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::narrow_test) ) ) [191]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::wide_test) ) ) [192]</system-out>
      <system-out>ASSERT_EQ( 0, tr.run(&quot;*&quot;) ) [195]</system-out>
      <system-out>ASSERT_NEQ( NPOS, s.find(&quot;REPEATED&quot;) ) [204]</system-out>
      <system-out>ASSERT_NEQ( NPOS, s.find(&quot;template_test&quot;) ) [205]</system-out>
    </testcase>
    <testcase name="repeated_cross_suite" classname="repeated_suite::repeated_cross_suite" assertions="8" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::nested_suite::narrow_test) ) ) [217]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::nested_suite::wide_test) ) ) [218]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::nested_suite::inc_test) ) ) [219]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::nested_suite::dec_test) ) ) [220]</system-out>
      <system-out>ASSERT_EQ( 0, tr.run(&quot;*&quot;) ) [223]</system-out>
      <system-out>ASSERT_NEQ( NPOS, s.find(&quot;REPEATED&quot;) ) [232]</system-out>
      <system-out>ASSERT_NEQ( NPOS, s.find(&quot;template_test&quot;) ) [233]</system-out>
      <system-out>ASSERT_NEQ( NPOS, s.find(&quot;baseobj_test&quot;) ) [234]</system-out>
    </testcase>
  </testsuite>
  <testsuite name="runner_suite" id="10" tests="8" errors="0" failures="0" skipped="0" disabled="0" time="0" timestamp="2016-03-15 09:04:34" hostname="STARONE">
    <testcase name="stats_all" classname="runner_suite::stats_all" assertions="11" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::pass_assert1) ) ) [95]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::pass_assert2) ) ) [96]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::fail_assert) ) ) [97]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::nested_suite::pass1) ) ) [98]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::nested_suite::pass2) ) ) [99]</system-out>
      <system-out>ASSERT_EQ( 1, rslt ) [103]</system-out>
      <system-out>ASSERT_EQ( 5, tr.statistic_count(tdog::CNT_TOTAL, &quot;*&quot;) ) [106]</system-out>
      <system-out>ASSERT_EQ( 5, tr.statistic_count(tdog::CNT_RAN, &quot;*&quot;) ) [107]</system-out>
      <system-out>ASSERT_EQ( 1, tr.statistic_count(tdog::CNT_FAILED, &quot;*&quot;) ) [108]</system-out>
      <system-out>ASSERT_EQ( 0, tr.statistic_count(tdog::CNT_SKIPPED, &quot;*&quot;) ) [109]</system-out>
      <system-out>ASSERT_EQ( 0, tr.statistic_count(tdog::CNT_DISABLED, &quot;*&quot;) ) [110]</system-out>
    </testcase>
    <testcase name="stats_some" classname="runner_suite::stats_some" assertions="12" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::pass_assert1) ) ) [120]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::pass_assert2) ) ) [121]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::fail_assert) ) ) [122]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::nested_suite::pass1) ) ) [123]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::nested_suite::pass2) ) ) [124]</system-out>
      <system-out>ASSERT_EQ( 1, rslt ) [132]</system-out>
      <system-out>ASSERT_EQ( 5, tr.statistic_count(tdog::CNT_TOTAL, &quot;*&quot;) ) [136]</system-out>
      <system-out>ASSERT_EQ( 4, tr.statistic_count(tdog::CNT_RAN, &quot;*&quot;) ) [137]</system-out>
      <system-out>ASSERT_EQ( 1, tr.statistic_count(tdog::CNT_FAILED, &quot;*&quot;) ) [138]</system-out>
      <system-out>ASSERT_EQ( 0, tr.statistic_count(tdog::CNT_SKIPPED, &quot;*&quot;) ) [139]</system-out>
      <system-out>ASSERT_EQ( 0, tr.statistic_count(tdog::CNT_DISABLED, &quot;*&quot;) ) [140]</system-out>
      <system-out>ASSERT_EQ( 0, tr.statistic_count(tdog::CNT_ERRORS, &quot;*&quot;) ) [141]</system-out>
    </testcase>
    <testcase name="parsing" classname="runner_suite::parsing" assertions="20" status="PASS (OK)" time="0">
      <system-out>ASSERT( _run_parse&lt;char&gt;(7, argv1, rout, dout) ) [151]</system-out>
      <system-out>ASSERT_EQ( &quot;TEST1,SUITE1::TEST2,TEST3&quot;, rout ) [152]</system-out>
      <system-out>ASSERT_EQ( &quot;TEST4&quot;, dout ) [153]</system-out>
      <system-out>ASSERT( _run_parse&lt;char&gt;(7, argv2, rout, dout) ) [157]</system-out>
      <system-out>ASSERT_EQ( &quot;TEST1,SUITE1::TEST2,TEST3&quot;, rout ) [158]</system-out>
      <system-out>ASSERT_EQ( &quot;TEST4&quot;, dout ) [159]</system-out>
      <system-out>ASSERT( _run_parse&lt;char&gt;(4, argv3, rout, dout) ) [162]</system-out>
      <system-out>ASSERT_EQ( &quot;*&quot;, rout ) [163]</system-out>
      <system-out>ASSERT_EQ( &quot;TEST4&quot;, dout ) [164]</system-out>
      <system-out>ASSERT( _run_parse&lt;char&gt;(6, argv4, rout, dout) ) [167]</system-out>
      <system-out>ASSERT_EQ( &quot;TEST1,SUITE1::TEST2,TEST3&quot;, rout ) [168]</system-out>
      <system-out>ASSERT_EQ( &quot;TEST4&quot;, dout ) [169]</system-out>
      <system-out>ASSERT( _run_parse&lt;char&gt;(6, argv5, rout, dout) ) [172]</system-out>
      <system-out>ASSERT_EQ( &quot;TEST1,SUITE1::TEST2,TEST3&quot;, rout ) [173]</system-out>
      <system-out>ASSERT_EQ( &quot;TEST4&quot;, dout ) [174]</system-out>
      <system-out>ASSERT( _run_parse&lt;wchar_t&gt;(5, argv6, rout, dout) ) [179]</system-out>
      <system-out>ASSERT_EQ( &quot;TEST1,SUITE1::TEST2,TEST3&quot;, rout ) [180]</system-out>
      <system-out>ASSERT_EQ( &quot;TEST4&quot;, dout ) [181]</system-out>
      <system-out>ASSERT_NOT( _run_parse&lt;char&gt;(3, argv7, rout, dout) ) [185]</system-out>
      <system-out>ASSERT_EQ( &quot;&quot;, rout ) [186]</system-out>
    </testcase>
    <testcase name="cmdline" classname="runner_suite::cmdline" assertions="12" status="PASS (OK)" time="0">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::pass_assert1) ) ) [194]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::pass_assert2) ) ) [195]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::fail_assert) ) ) [196]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::nested_suite::pass1) ) ) [197]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::nested_suite::pass2) ) ) [198]</system-out>
      <system-out>ASSERT_EQ( 0, tr.run_cmdline(4, const_cast&lt;char**&gt;(argv)) ) [206]</system-out>
      <system-out>ASSERT_EQ( 5, tr.statistic_count(tdog::CNT_TOTAL, &quot;*&quot;) ) [209]</system-out>
      <system-out>ASSERT_EQ( 4, tr.statistic_count(tdog::CNT_RAN, &quot;*&quot;) ) [210]</system-out>
      <system-out>ASSERT_EQ( 0, tr.statistic_count(tdog::CNT_FAILED, &quot;*&quot;) ) [211]</system-out>
      <system-out>ASSERT_EQ( 0, tr.statistic_count(tdog::CNT_SKIPPED, &quot;*&quot;) ) [212]</system-out>
      <system-out>ASSERT_EQ( 1, tr.statistic_count(tdog::CNT_DISABLED, &quot;*&quot;) ) [213]</system-out>
      <system-out>ASSERT_EQ( 0, tr.statistic_count(tdog::CNT_ERRORS, &quot;*&quot;) ) [214]</system-out>
    </testcase>
    <testcase name="singleton_method" classname="runner_suite::singleton_method" assertions="2" status="PASS (OK)" time="0">
      <system-out>The runner project name must not be empty [223]</system-out>
      <system-out>ASSERT_EQ( name, tdog_test::global_project_name() ) [227]</system-out>
      <system-out>Project name: TDOG C++ xUnit Testing Framework [228]</system-out>
    </testcase>
    <testcase name="immutable_test" classname="runner_suite::immutable_test" assertions="2" status="PASS (OK)" time="0">
      <system-out>ASSERT THROWS ( TDOG_SET_PROJECT_NAME(&quot;New name&quot;) )std::logic_error [236]</system-out>
      <system-out>ASSERT_NEQ( &quot;New name&quot;, tdog::runner::global().project_name() ) [238]</system-out>
    </testcase>
    <testcase name="full_sorted" classname="runner_suite::full_sorted" assertions="43" status="PASS (OK)" time="0">
      <system-out>ASSERT_EQ( 0, suite_open.counter() ) [293]</system-out>
      <system-out>ASSERT_EQ( 0, suite_close.counter() ) [294]</system-out>
      <system-out>ASSERT_EQ( 0, suiteA_open.counter() ) [295]</system-out>
      <system-out>ASSERT_EQ( 0, suiteA_close.counter() ) [296]</system-out>
      <system-out>ASSERT_EQ( 0, suiteAB_open.counter() ) [297]</system-out>
      <system-out>ASSERT_EQ( 0, suiteAB_close.counter() ) [298]</system-out>
      <system-out>ASSERT_EQ( 0, suiteC_open.counter() ) [299]</system-out>
      <system-out>ASSERT_EQ( 0, suiteC_close.counter() ) [300]</system-out>
      <system-out>FULL SORT: true [336]</system-out>
      <system-out>ASSERT_EQ( USER_TYPE::fullsort, tr.sorted() ) [338]</system-out>
      <system-out>Suite names... [344]</system-out>
      <system-out>suiteA [347]</system-out>
      <system-out>suiteA::suiteB [347]</system-out>
      <system-out>suiteC [347]</system-out>
      <system-out>ASSERT_EQ( 4, (int)names.size() ) [351]</system-out>
      <system-out>ASSERT_EQ( &quot;&quot;, names[0] ) [352]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA&quot;, names[1] ) [353]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::suiteB&quot;, names[2] ) [354]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteC&quot;, names[3] ) [355]</system-out>
      <system-out>Test names... [360]</system-out>
      <system-out>setup01 [363]</system-out>
      <system-out>SETUP02 [363]</system-out>
      <system-out>tc1 [363]</system-out>
      <system-out>TC2 [363]</system-out>
      <system-out>TC2_ [363]</system-out>
      <system-out>suiteA::_setup01 [363]</system-out>
      <system-out>suiteA::SetUp02 [363]</system-out>
      <system-out>suiteA::tc1 [363]</system-out>
      <system-out>suiteA::TC2 [363]</system-out>
      <system-out>suiteA::TC2_ [363]</system-out>
      <system-out>suiteA::suiteB::_setup01 [363]</system-out>
      <system-out>suiteA::suiteB::SetUp02 [363]</system-out>
      <system-out>suiteA::suiteB::tc1 [363]</system-out>
      <system-out>suiteA::suiteB::TC2 [363]</system-out>
      <system-out>suiteA::suiteB::TC2_ [363]</system-out>
      <system-out>suiteA::suiteB::_teardown01 [363]</system-out>
      <system-out>suiteA::suiteB::TEARDOWN02 [363]</system-out>
      <system-out>suiteA::_teardown01 [363]</system-out>
      <system-out>suiteA::TEARDOWN02 [363]</system-out>
      <system-out>suiteC::_setup01 [363]</system-out>
      <system-out>suiteC::SetUp02 [363]</system-out>
      <system-out>suiteC::tc1 [363]</system-out>
      <system-out>suiteC::TC2 [363]</system-out>
      <system-out>suiteC::TC2_ [363]</system-out>
      <system-out>suiteC::_teardown01 [363]</system-out>
      <system-out>suiteC::TEARDOWN02 [363]</system-out>
      <system-out>_teardown01 [363]</system-out>
      <system-out>TEARDOWN02 [363]</system-out>
      <system-out>ASSERT_EQ( 28, (int)names.size() ) [367]</system-out>
      <system-out>ASSERT_EQ( &quot;setup01&quot;, names[0] ) [372]</system-out>
      <system-out>ASSERT_EQ( &quot;SETUP02&quot;, names[1] ) [373]</system-out>
      <system-out>ASSERT_EQ( &quot;tc1&quot;, names[2] ) [374]</system-out>
      <system-out>ASSERT_EQ( &quot;TC2&quot;, names[3] ) [375]</system-out>
      <system-out>ASSERT_EQ( &quot;TC2_&quot;, names[4] ) [376]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::_setup01&quot;, names[5] ) [378]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::SetUp02&quot;, names[6] ) [379]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::tc1&quot;, names[7] ) [380]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::TC2&quot;, names[8] ) [381]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::TC2_&quot;, names[9] ) [382]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::suiteB::_setup01&quot;, names[10] ) [384]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::suiteB::SetUp02&quot;, names[11] ) [385]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::suiteB::tc1&quot;, names[12] ) [386]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::suiteB::TC2&quot;, names[13] ) [387]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::suiteB::TC2_&quot;, names[14] ) [388]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::suiteB::_teardown01&quot;, names[15] ) [389]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::suiteB::TEARDOWN02&quot;, names[16] ) [390]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::_teardown01&quot;, names[17] ) [392]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::TEARDOWN02&quot;, names[18] ) [393]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteC::_setup01&quot;, names[19] ) [395]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteC::SetUp02&quot;, names[20] ) [396]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteC::tc1&quot;, names[21] ) [397]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteC::TC2&quot;, names[22] ) [398]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteC::TC2_&quot;, names[23] ) [399]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteC::_teardown01&quot;, names[24] ) [400]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteC::TEARDOWN02&quot;, names[25] ) [401]</system-out>
      <system-out>ASSERT_EQ( &quot;_teardown01&quot;, names[26] ) [404]</system-out>
      <system-out>ASSERT_EQ( &quot;TEARDOWN02&quot;, names[27] ) [405]</system-out>
    </testcase>
    <testcase name="part_sorted" classname="runner_suite::part_sorted" assertions="43" status="PASS (OK)" time="0">
      <system-out>ASSERT_EQ( 0, suite_open.counter() ) [293]</system-out>
      <system-out>ASSERT_EQ( 0, suite_close.counter() ) [294]</system-out>
      <system-out>ASSERT_EQ( 0, suiteA_open.counter() ) [295]</system-out>
      <system-out>ASSERT_EQ( 0, suiteA_close.counter() ) [296]</system-out>
      <system-out>ASSERT_EQ( 0, suiteAB_open.counter() ) [297]</system-out>
      <system-out>ASSERT_EQ( 0, suiteAB_close.counter() ) [298]</system-out>
      <system-out>ASSERT_EQ( 0, suiteC_open.counter() ) [299]</system-out>
      <system-out>ASSERT_EQ( 0, suiteC_close.counter() ) [300]</system-out>
      <system-out>FULL SORT: false [336]</system-out>
      <system-out>ASSERT_EQ( USER_TYPE::fullsort, tr.sorted() ) [338]</system-out>
      <system-out>Suite names... [344]</system-out>
      <system-out>suiteA [347]</system-out>
      <system-out>suiteA::suiteB [347]</system-out>
      <system-out>suiteC [347]</system-out>
      <system-out>ASSERT_EQ( 4, (int)names.size() ) [351]</system-out>
      <system-out>ASSERT_EQ( &quot;&quot;, names[0] ) [352]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA&quot;, names[1] ) [353]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::suiteB&quot;, names[2] ) [354]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteC&quot;, names[3] ) [355]</system-out>
      <system-out>Test names... [360]</system-out>
      <system-out>setup01 [363]</system-out>
      <system-out>SETUP02 [363]</system-out>
      <system-out>TC2_ [363]</system-out>
      <system-out>TC2 [363]</system-out>
      <system-out>tc1 [363]</system-out>
      <system-out>suiteA::_setup01 [363]</system-out>
      <system-out>suiteA::SetUp02 [363]</system-out>
      <system-out>suiteA::TC2_ [363]</system-out>
      <system-out>suiteA::TC2 [363]</system-out>
      <system-out>suiteA::tc1 [363]</system-out>
      <system-out>suiteA::suiteB::_setup01 [363]</system-out>
      <system-out>suiteA::suiteB::SetUp02 [363]</system-out>
      <system-out>suiteA::suiteB::TC2_ [363]</system-out>
      <system-out>suiteA::suiteB::TC2 [363]</system-out>
      <system-out>suiteA::suiteB::tc1 [363]</system-out>
      <system-out>suiteA::suiteB::_teardown01 [363]</system-out>
      <system-out>suiteA::suiteB::TEARDOWN02 [363]</system-out>
      <system-out>suiteA::_teardown01 [363]</system-out>
      <system-out>suiteA::TEARDOWN02 [363]</system-out>
      <system-out>suiteC::_setup01 [363]</system-out>
      <system-out>suiteC::SetUp02 [363]</system-out>
      <system-out>suiteC::TC2_ [363]</system-out>
      <system-out>suiteC::TC2 [363]</system-out>
      <system-out>suiteC::tc1 [363]</system-out>
      <system-out>suiteC::_teardown01 [363]</system-out>
      <system-out>suiteC::TEARDOWN02 [363]</system-out>
      <system-out>_teardown01 [363]</system-out>
      <system-out>TEARDOWN02 [363]</system-out>
      <system-out>ASSERT_EQ( 28, (int)names.size() ) [367]</system-out>
      <system-out>ASSERT_EQ( &quot;setup01&quot;, names[0] ) [412]</system-out>
      <system-out>ASSERT_EQ( &quot;SETUP02&quot;, names[1] ) [413]</system-out>
      <system-out>ASSERT_EQ( &quot;TC2_&quot;, names[2] ) [414]</system-out>
      <system-out>ASSERT_EQ( &quot;TC2&quot;, names[3] ) [415]</system-out>
      <system-out>ASSERT_EQ( &quot;tc1&quot;, names[4] ) [416]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::_setup01&quot;, names[5] ) [418]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::SetUp02&quot;, names[6] ) [419]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::TC2_&quot;, names[7] ) [420]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::TC2&quot;, names[8] ) [421]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::tc1&quot;, names[9] ) [422]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::suiteB::_setup01&quot;, names[10] ) [424]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::suiteB::SetUp02&quot;, names[11] ) [425]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::suiteB::TC2_&quot;, names[12] ) [426]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::suiteB::TC2&quot;, names[13] ) [427]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::suiteB::tc1&quot;, names[14] ) [428]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::suiteB::_teardown01&quot;, names[15] ) [429]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::suiteB::TEARDOWN02&quot;, names[16] ) [430]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::_teardown01&quot;, names[17] ) [432]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteA::TEARDOWN02&quot;, names[18] ) [433]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteC::_setup01&quot;, names[19] ) [435]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteC::SetUp02&quot;, names[20] ) [436]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteC::TC2_&quot;, names[21] ) [437]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteC::TC2&quot;, names[22] ) [438]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteC::tc1&quot;, names[23] ) [439]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteC::_teardown01&quot;, names[24] ) [440]</system-out>
      <system-out>ASSERT_EQ( &quot;suiteC::TEARDOWN02&quot;, names[25] ) [441]</system-out>
      <system-out>ASSERT_EQ( &quot;_teardown01&quot;, names[26] ) [444]</system-out>
      <system-out>ASSERT_EQ( &quot;TEARDOWN02&quot;, names[27] ) [445]</system-out>
    </testcase>
  </testsuite>
  <testsuite name="size_suite" id="11" tests="1" errors="0" failures="0" skipped="0" disabled="0" time="0" timestamp="2016-03-15 09:04:34" hostname="STARONE">
    <testcase name="test_sizes" classname="size_suite::test_sizes" assertions="9" status="PASS (OK)" time="0">
      <system-out>ASSERT_EQ( 1, static_cast&lt;int&gt;(sizeof(tdog::i8_t)) ) [36]</system-out>
      <system-out>ASSERT_EQ( 1, static_cast&lt;int&gt;(sizeof(tdog::u8_t)) ) [37]</system-out>
      <system-out>ASSERT_EQ( 2, static_cast&lt;int&gt;(sizeof(tdog::i16_t)) ) [38]</system-out>
      <system-out>ASSERT_EQ( 2, static_cast&lt;int&gt;(sizeof(tdog::u16_t)) ) [39]</system-out>
      <system-out>ASSERT_EQ( 4, static_cast&lt;int&gt;(sizeof(tdog::i32_t)) ) [40]</system-out>
      <system-out>ASSERT_EQ( 4, static_cast&lt;int&gt;(sizeof(tdog::u32_t)) ) [41]</system-out>
      <system-out>ASSERT_EQ( 8, static_cast&lt;int&gt;(sizeof(tdog::i64_t)) ) [42]</system-out>
      <system-out>ASSERT_EQ( 8, static_cast&lt;int&gt;(sizeof(tdog::u64_t)) ) [43]</system-out>
      <system-out>ASSERT_GTE( 8, static_cast&lt;int&gt;(sizeof(tdog::xint_t)) ) [44]</system-out>
    </testcase>
  </testsuite>
  <testsuite name="status_suite" id="12" tests="1" errors="0" failures="0" skipped="0" disabled="0" time="1" timestamp="2016-03-15 09:04:34" hostname="STARONE">
    <testcase name="status_test" classname="status_suite::status_test" assertions="43" status="PASS (OK)" time="1">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::pass_default) ) ) [124]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::pass_assert) ) ) [125]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::fail_assert) ) ) [126]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::fail_macro) ) ) [127]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::error_throw) ) ) [128]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::error_macro) ) ) [129]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::wait1) ) ) [130]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::wait2) ) ) [131]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::disabled_test) ) ) [132]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::skip_test) ) ) [133]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::nested_suite::pass1) ) ) [134]</system-out>
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::nested_suite::pass2) ) ) [135]</system-out>
      <system-out>ASSERT_EQ( 1, tr.set_enabled(&quot;status_suite::internal_suite::disabled_test&quot;, false) ) [138]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_NOT_EXIST, tr.test_status(&quot;status_suite::internal_suite&quot;) ) [141]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_NOT_EXIST, tr.test_status(&quot;status_suite::internal_suite::&quot;) ) [142]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_NOT_EXIST, tr.test_status(&quot;status_suite::internal_suite::*&quot;) ) [143]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_NOT_EXIST, tr.test_status(&quot;status_suite::internal_suite::wrong_name&quot;) ) [144]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_READY, tr.test_status(&quot;status_suite::internal_suite::pass_default&quot;) ) [146]</system-out>
      <system-out>ASSERT_EQ( tdog::TS_DISABLED, tr.test_status(&quot;status_suite::internal_suite::disabled_test&quot;) ) [148]</system-out>
      <system-out>ASSERT_EQ( 12, total ) [152]</system-out>
      <system-out>ASSERT_EQ( total, tr.statistic_count(tdog::CNT_TOTAL, &quot;::*&quot;) ) [153]</system-out>
      <system-out>ASSERT_EQ( 2, tr.statistic_count(tdog::CNT_TOTAL, &quot;status_suite::internal_suite::nested_suite::&quot;) ) [154]</system-out>
      <system-out>ASSERT_EQ( 0, tr.statistic_count(tdog::CNT_SKIPPED, &quot;*&quot;) ) [155]</system-out>
      <system-out>ASSERT_EQ( 0, tr.statistic_count(tdog::CNT_SKIPPED, &quot;status_suite::internal_suite::&quot;) ) [156]</system-out>
      <system-out>ASSERT_EQ( 1, tr.statistic_count(tdog::CNT_DISABLED, &quot;*&quot;) ) [157]</system-out>
      <system-out>ASSERT_EQ( 1, tr.statistic_count(tdog::CNT_DISABLED, &quot;status_suite::internal_suite::&quot;) ) [158]</system-out>
      <system-out>ASSERT_EQ( 0, tr.statistic_count(tdog::CNT_TOTAL, &quot;::&quot;) ) [161]</system-out>
      <system-out>ASSERT_EQ( 4, run_rslt ) [166]</system-out>
      <system-out>ASSERT_EQ( total, tr.statistic_count(tdog::CNT_TOTAL, &quot;*&quot;) ) [169]</system-out>
      <system-out>ASSERT_EQ( 1, not_run ) [173]</system-out>
      <system-out>ASSERT_EQ( 2, not_run ) [176]</system-out>
      <system-out>ASSERT_EQ( (total - not_run), ran ) [179]</system-out>
      <system-out>ASSERT_EQ( 2, tr.statistic_count(tdog::CNT_FAILED, &quot;*&quot;) ) [181]</system-out>
      <system-out>ASSERT_EQ( 2, tr.statistic_count(tdog::CNT_ERRORS, &quot;*&quot;) ) [182]</system-out>
      <system-out>ASSERT_EQ( (ran - run_rslt), tr.statistic_count(tdog::CNT_PASSED, &quot;*&quot;) ) [183]</system-out>
      <system-out>ASSERT_GT( tr.statistic_count(tdog::CNT_ASSERT_TOTAL, &quot;*&quot;), 0 ) [186]</system-out>
      <system-out>ASSERT_GT( tr.statistic_count(tdog::CNT_ASSERT_FAILED, &quot;*&quot;), 0 ) [187]</system-out>
      <system-out>ASSERT_GTE( tr.statistic_count(tdog::CNT_DURATION, &quot;*&quot;), 1500 ) [191]</system-out>
      <system-out>ASSERT_LT( tr.statistic_count(tdog::CNT_DURATION, &quot;*&quot;), 3000 ) [192]</system-out>
      <system-out>ASSERT_GTE( tr.statistic_count(tdog::CNT_DURATION, &quot;status_suite::internal_suite::wait1&quot;), 500 ) [193]</system-out>
      <system-out>ASSERT_LT( tr.statistic_count(tdog::CNT_DURATION, &quot;status_suite::internal_suite::wait1&quot;), 1000 ) [194]</system-out>
      <system-out>ASSERT_GTE( tr.statistic_count(tdog::CNT_DURATION, &quot;status_suite::internal_suite::wait2&quot;), 1000 ) [195]</system-out>
      <system-out>ASSERT_LT( tr.statistic_count(tdog::CNT_DURATION, &quot;status_suite::internal_suite::wait2&quot;), 1500 ) [196]</system-out>
    </testcase>
  </testsuite>
  <testsuite name="timing_suite" id="13" tests="7" errors="0" failures="0" skipped="0" disabled="0" time="9" timestamp="2016-03-15 09:04:35" hostname="STARONE">
    <testcase name="local_timeout" classname="timing_suite::local_timeout" assertions="2" status="PASS (OK)" time="2">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::local_timeout) ) ) [127]</system-out>
      <system-out>ASSERT_EQ( 1, tr.run() ) [129]</system-out>
    </testcase>
    <testcase name="short_sleep" classname="timing_suite::short_sleep" assertions="2" status="PASS (OK)" time="1">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::short_sleep) ) ) [141]</system-out>
      <system-out>ASSERT_EQ( 1, tr.run() ) [143]</system-out>
    </testcase>
    <testcase name="long_sleep" classname="timing_suite::long_sleep" assertions="2" status="PASS (OK)" time="2">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::long_sleep) ) ) [155]</system-out>
      <system-out>ASSERT_EQ( 1, tr.run() ) [157]</system-out>
    </testcase>
    <testcase name="global_timeout" classname="timing_suite::global_timeout" assertions="2" status="PASS (OK)" time="1">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::global_timeout) ) ) [169]</system-out>
      <system-out>ASSERT_EQ( 1, tr.run() ) [173]</system-out>
    </testcase>
    <testcase name="global_exempt" classname="timing_suite::global_exempt" assertions="2" status="PASS (OK)" time="1">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::global_exempt) ) ) [186]</system-out>
      <system-out>ASSERT_EQ( 0, tr.run() ) [190]</system-out>
    </testcase>
    <testcase name="time_warning" classname="timing_suite::time_warning" assertions="3" status="PASS (OK)" time="1">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::global_exempt) ) ) [202]</system-out>
      <system-out>ASSERT_EQ( 0, tr.run() ) [207]</system-out>
      <system-out>ASSERT_NEQ( NPOS, s.find(&quot;time warning threshold of 1000 ms exceeded&quot;) ) [214]</system-out>
    </testcase>
    <testcase name="check_limit" classname="timing_suite::check_limit" assertions="3" status="PASS (OK)" time="1">
      <system-out>ASSERT( tr.register_test( TDOG_GET_TCPTR(internal_suite::check_limit) ) ) [226]</system-out>
      <system-out>ASSERT_EQ( 1, tr.run() ) [230]</system-out>
      <system-out>ASSERT_NEQ( NPOS, s.find(&quot;Exceed limit detected&quot;) ) [237]</system-out>
    </testcase>
  </testsuite>
  <testsuite name="DEFAULT" id="14" tests="2" errors="0" failures="0" skipped="0" disabled="0" time="0" timestamp="2016-03-15 09:04:47" hostname="STARONE">
    <testcase name="teardown_global_01" classname="teardown_global_01" assertions="2" status="PASS (OK)" time="0">
      <system-out>ASSERT( g_setup_called ) [77]</system-out>
      <system-out>ASSERT( g_test_called ) [78]</system-out>
    </testcase>
    <testcase name="teardown_global_02" classname="teardown_global_02" assertions="2" status="PASS (OK)" time="0">
      <system-out>ASSERT( g_teardown_called ) [85]</system-out>
      <system-out>ASSERT( g_test_called ) [86]</system-out>
    </testcase>
  </testsuite>
</testsuites>
